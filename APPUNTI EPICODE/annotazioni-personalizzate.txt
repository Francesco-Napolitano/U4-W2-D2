Per creare una annotazione personalizzata in Java, è necessario definire un'interfaccia con il modificatore `@interface`. Ecco i passaggi fondamentali:

1. Definizione dell'Annotazione

Per definire un'annotazione personalizzata, devi dichiarare un'interfaccia preceduta dal simbolo `@`. Questa interfaccia può includere elementi che definiscono i valori che l'annotazione può accettare.

public @interface MyCustomAnnotation {
    String value() default "default value";
    int number() default 42;
}

In questo esempio, `MyCustomAnnotation` ha due elementi: `value` di tipo `String` e `number` di tipo `int`, entrambi con valori di default.

2. Specificare la Retention Policy

La retention policy determina a quale livello l'annotazione è disponibile. Puoi scegliere tra `RetentionPolicy.SOURCE`, `RetentionPolicy.CLASS`, e `RetentionPolicy.RUNTIME`.

- SOURCE: L'annotazione è disponibile solo nel codice sorgente e viene ignorata dal compilatore.
- CLASS: L'annotazione è inclusa nel file .class ma non è disponibile a runtime tramite riflessione.
- RUNTIME: L'annotazione è disponibile a runtime tramite riflessione.

import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;

@Retention(RetentionPolicy.RUNTIME)
public @interface MyCustomAnnotation {
    // Elementi dell'annotazione
}

3. Specificare il Target

Puoi definire dove la tua annotazione può essere applicata (es. metodi, classi, campi) usando l'annotazione `@Target`.

import java.lang.annotation.ElementType;
import java.lang.annotation.Target;

@Target({ElementType.METHOD, ElementType.TYPE})
public @interface MyCustomAnnotation {
    // Elementi dell'annotazione
}

Esempio Completo

import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;
import java.lang.annotation.ElementType;

@Retention(RetentionPolicy.RUNTIME)
@Target({ElementType.METHOD, ElementType.TYPE})
public @interface MyCustomAnnotation {
    String value() default "default value";
    int number() default 42;
}

Utilizzo dell'Annotazione Personalizzata

Dopo aver definito l'annotazione, puoi usarla nel tuo codice come qualsiasi altra annotazione:

@MyCustomAnnotation(value = "Test", number = 100)
public class MyClass {
    @MyCustomAnnotation
    public void myMethod() {
        // Codice
    }
}


In `MyClass`, l'annotazione `MyCustomAnnotation` viene applicata sia alla classe stessa con valori specifici che al metodo `myMethod` con i valori di default.